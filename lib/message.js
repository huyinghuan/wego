// Generated by CoffeeScript 1.9.2
(function() {
  var Message;

  Message = (function() {
    function Message() {}

    Message.prototype.getTextContent = function(data) {
      return "<Content><![CDATA[" + data.Content + "]]></Content>";
    };

    Message.prototype.getImageContent = function(data) {
      return "<Image><MediaId><![CDATA[" + data.MediaId + "]]></MediaId></Image>";
    };

    Message.prototype.getVoiceContent = function(data) {
      return "<Voice><MediaId><![CDATA[" + data.MediaId + "]]></MediaId></Voice>";
    };

    Message.prototype.getVideoContent = function(data) {
      return "<Video> <MediaId><![CDATA[" + data.MediaId + "]]></MediaId> <Title><![CDATA[" + data.Title + "]]></Title> <Description><![CDATA[" + data.Description + "]]></Description> </Video>";
    };

    Message.prototype.getMusicContent = function(data) {
      return "<Music> <Title><![CDATA[" + data.Title + "]]></Title> <Description><![CDATA[" + data.Description + "]]></Description> <MusicUrl><![CDATA[" + data.MusicUrl + "]]></MusicUrl> <HQMusicUrl><![CDATA[" + data.HQMusicUrl + "]]></HQMusicUrl> <ThumbMediaId><![CDATA[" + data.ThumbMediaId + "]]></ThumbMediaId> </Music>";
    };

    Message.prototype.getNewsContent = function(data) {
      var article, articles, articlesConunt, i, items, len;
      articles = data.Articles;
      articles = articles.length > 10 ? articles.splice(0, 10) : articles;
      articlesConunt = "<ArticleCount>" + articles.length + "</ArticleCount>";
      items = [];
      for (i = 0, len = articles.length; i < len; i++) {
        article = articles[i];
        items.push("<item> <Title><![CDATA[" + article.Title + "]]></Title><Description><![CDATA[" + article.Description + "]]></Description> <PicUrl><![CDATA[" + article.PicUrl + "]]></PicUrl> <Url><![CDATA[" + article.Url + "]]></Url> </item>");
      }
      return articlesConunt + "<Articles>" + (items.join('')) + "</Articles>";
    };

    Message.prototype.getContent = function(data) {
      var fn, msg, self, time, type;
      self = this;
      type = data.MsgType;
      fn = self["get" + (type.charAt(0).toUpperCase()) + (type.substring(1)) + "Content"];
      msg = fn(data);
      time = Math.round(new Date().getTime() / 1000);
      return "<xml> <ToUserName><![CDATA[" + data.ToUserName + "]]></ToUserName> <FromUserName><![CDATA[" + data.FromUserName + "]]></FromUserName> <CreateTime>" + time + "</CreateTime> <MsgType><![CDATA[" + data.MsgType + "]]></MsgType> " + msg + " <FuncFlag>" + (data.FuncFlag || 0) + "</FuncFlag> </xml>";
    };

    return Message;

  })();

  module.exports = new Message();

}).call(this);
